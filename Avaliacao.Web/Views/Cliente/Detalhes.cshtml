@model ClienteDetalhesModel

@this.DefinirTitulo(Model.ModoOperacao switch
{
    ModoOperacao.Criacao => "Novo cliente",
    ModoOperacao.Edicao => "Editar cliente",
    var modoOperacao => throw new Exception($"O modo de operação '{modoOperacao}' não é suportado.")
})

@section scripts {
    <script type="text/javascript">
        (() => {
            function buscarUltimoIndex() {
                let ultimoIndex = -1;
                const elementos = document.querySelectorAll('[name^="Cliente.Telefones["]');

                for (const elemento of elementos) {
                    const match = elemento.getAttribute('name').match(/\[([0-9]+)\]/);
                    if (!match)
                        continue;

                    const index = Number(match[1]);
                    if (!isNaN(index))
                        ultimoIndex = Math.max(ultimoIndex, index);
                }

                return ultimoIndex;
            }

            document.addEventListener('DOMContentLoaded', () => {
                const adicionarTelefone = document.querySelector('#add-telefone');

                adicionarTelefone.addEventListener('click', () => {
                    fetch('@Url.Action("Telefone")').then(response => {
                        response.text().then(html => {
                            const id = buscarUltimoIndex() + 1;
                            const container = document.createElement('div');
                            container.innerHTML = html;

                            for (const elemento of container.querySelectorAll('[name]')) {
                                elemento.removeAttribute('id');
                                elemento.setAttribute('name', `Cliente.Telefones[${id}].${elemento.getAttribute('name')}`);
                            }

                            adicionarTelefone.parentElement.appendChild(container.firstElementChild);
                        });
                    });

                });
            });

            window.removerTelefone = (botao) => {
                botao.closest('.telefone').remove();
            }
        })();
    </script>
}

<form asp-action="Salvar">
    <input type="hidden" asp-for="ModoOperacao" />
    <input type="hidden" asp-for="Cliente.Id" />

    <div class="mb-3">
        <label asp-for="Cliente.Nome"></label>
        <input type="text" asp-for="Cliente.Nome" class="form-control" />
        <span asp-validation-for="Cliente.Nome" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Cliente.Email"></label>
        <input type="email" asp-for="Cliente.Email" class="form-control" />
        <span asp-validation-for="Cliente.Email" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Cliente.Nascimento"></label>
        <input type="date" asp-for="Cliente.Nascimento" class="form-control" />
        <span asp-validation-for="Cliente.Nascimento" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <button id="add-telefone" type="button" class="btn btn-primary btn-sm mb-3">Adicionar telefone</button>

        @if (Model.Cliente.Telefones is not null)
            for (var i = 0; i < Model.Cliente.Telefones.Count; i++)
            {
                <partial name="Telefone" for="Cliente.Telefones[i]" />
            }
    </div>

    <div class="text-right">
        <a href="@Url.Action("Index")" class="btn btn-secondary">Voltar</a>
        <button type="submit" class="btn btn-primary">Salvar</button>
    </div>
</form>